{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["drumPads","keyCode","keyChar","id","url","DrumPad","props","state","handleKeyPress","bind","handleClick","changeDisplay","playSound","document","addEventListener","this","removeEventListener","event","linkToFocus","getElementById","focus","setTimeout","blur","value","displayCallback","e","sound","currentTime","play","class","onClick","onKeyDown","className","src","React","Component","App","display","handleDisplay","childData","setState","drumPadsDisplayed","map","drumObj","i","drumPadsArr","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6081c38e.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nconst drumPads = [{\n  keyCode: 81,\n  keyChar: 'Q',\n  id: 'Cev_H2',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3'\n}, {\n  keyCode: 87,\n  keyChar: 'W',\n  id: 'Dry_Ohh',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dry_Ohh.mp3'\n}, {\n  keyCode: 69,\n  keyChar: 'E',\n  id: 'Dsc_Oh',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\n}, {\n  keyCode: 65,\n  keyChar: 'A',\n  id: 'Heater-6',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\n}, {\n  keyCode: 83,\n  keyChar: 'S',\n  id: \"Kick-n'-Hat\",\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\n}, {\n  keyCode: 68,\n  keyChar: 'D',\n  id: 'Bld_H1',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Bld_H1.mp3'\n}, {\n  keyCode: 90,\n  keyChar: 'Z',\n  id: 'Punchy-Kick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/punchy_kick_1.mp3'\n}, {\n  keyCode: 88,\n  keyChar: 'X',\n  id: 'Side-Stick',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/side_stick_1.mp3'\n}, {\n  keyCode: 67,\n  keyChar: 'C',\n  id: 'Snare',\n  url: 'https://s3.amazonaws.com/freecodecamp/drums/Brk_Snr.mp3'\n}\n];\n\nclass DrumPad extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.handleKeyPress = this.handleKeyPress.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n        this.changeDisplay = this.changeDisplay.bind(this);\n        this.playSound = this.playSound.bind(this);\n    }\n\n    componentDidMount() {\n        document.addEventListener('keydown', this.handleKeyPress);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', this.handleKeyPress);\n    }\n\n    handleClick(event) {\n        this.playSound();\n        this.changeDisplay(this.props.id);\n\n        var linkToFocus = document.getElementById(this.props.id);\n        linkToFocus.focus();\n        setTimeout(function () { linkToFocus.blur(); }, 100);\n    }\n\n    handleKeyPress(event) {\n        if (event.keyCode === this.props.keyCode) {\n            this.playSound();\n            this.changeDisplay(this.props.id);\n\n            var linkToFocus = document.getElementById(this.props.id);\n            linkToFocus.focus();\n            setTimeout(function () { linkToFocus.blur(); }, 100);\n\n        }\n    }\n\n    changeDisplay(value) {\n        this.props.displayCallback(value);\n    }\n\n    playSound(e) {\n        const sound = document.getElementById(this.props.keyChar);\n        sound.currentTime = 0;\n        sound.play();\n    }\n\n    render() {\n        return (\n            <button class=\"drum-pad\" id={this.props.id} onClick={this.handleClick} onKeyDown={this.handleKeyPress}>\n                {this.props.keyChar}\n                <audio className='clip' id={this.props.keyChar} src={this.props.url}></audio>\n            </button>\n        )\n    }\n};\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: \"\",\n    };\n    this.handleDisplay = this.handleDisplay.bind(this)\n  }\n\n  handleDisplay(childData) {\n    this.setState({ display: childData })\n  }\n\n  render() {\n    let drumPadsDisplayed = drumPads.map((drumObj, i, drumPadsArr) => {\n      return (\n        <DrumPad\n          keyCode={drumPadsArr[i].keyCode}\n          keyChar={drumPadsArr[i].keyChar}\n          id={drumPadsArr[i].id}\n          url={drumPadsArr[i].url}\n          displayCallback={this.handleDisplay}\n        />\n      )\n    });\n    return (\n      <div id=\"drum-machine\">\n        {/* TITLE */}\n        <div id=\"header\">\n          <h1>BEATS DRUM</h1>\n          <h3>by <a href=\"https://codepen.io/skaisahni\" > skaisahni</a></h3>\n        </div>\n\n        {/* DISPLAY */}\n        <div id=\"display\">\n          <p>{this.state.display}</p>\n        </div>\n\n\n        {/* DRUM MACHINE */}\n        <div id=\"keys\">{drumPadsDisplayed}</div>\n      </div>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}